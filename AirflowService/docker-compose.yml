# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:master-python3.8
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_GID                  - Group ID in Airflow containers
#                                Default: 50000
#
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Default: ''


# PRECONFIGURATION
#version: '3'
x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.0-python3.8}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor #LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow_user:airflow_pass@postgres/airflow_db
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow_user:airflow_pass@postgres/airflow_db
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW_HOME: /opt/airflow
    AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    AIRFLOW__CORE__PLUGINS_FOLDER: /opt/airflow/plugins
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64/
  volumes:
    - ./volumes/dags:/opt/airflow/dags
    - ./volumes/logs:/opt/airflow/logs
    - ./volumes/plugins:/opt/airflow/plugins
  user: "50000"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - airflow_network
  
services:

  # -------------------------------------------------------------------
  # SERVICES: DATABASE FOR AIRFLOW OPERATION
  # -------------------------------------------------------------------
  postgres:
    image: postgres:13
    hostname: postgres
    ports:
      - 5433:5432 # Change the external port to 5433 IF ALREADU USED
    environment:
      POSTGRES_USER: airflow_user
      POSTGRES_PASSWORD: airflow_pass
      POSTGRES_DB: airflow_db
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    networks:
      - airflow_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow_user", "-d", "airflow_db"]
      interval: 5s
      retries: 5
    restart: always

  # -------------------------------------------------------------------
  # SERVICES: DATABASE FOR CATCH OPERATION
  # -------------------------------------------------------------------
  redis:
    image: redis:latest
    hostname: redis
    ports:
      - 6379:6379
    networks:
      - airflow_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  # -------------------------------------------------------------------
  # SERVICES: START AIRFLOW WEBSERVER ADMINISTRATION PAGE
  # -------------------------------------------------------------------
  airflow-webserver:
    <<: *airflow-common
    command: airflow webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:58080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  # -------------------------------------------------------------------
  # SERVICES: START AIRFLOW BACKGROUND SCHEDULER
  # -------------------------------------------------------------------
  airflow-scheduler:
    <<: *airflow-common
    command: airflow scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  # -------------------------------------------------------------------
  # SERVICES: START AIRFLOW BACKGROUND WORKER
  # -------------------------------------------------------------------
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  # -------------------------------------------------------------------
  # SERVICES: TO MONITOR CELERY
  # -------------------------------------------------------------------
  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  # -------------------------------------------------------------------
  # SERVICES: INITIALIZE AIRFLOW FOR FIRST TIME
  # -------------------------------------------------------------------
  airflow-init:
    <<: *airflow-common
    command: bash -c "airflow db init && airflow db upgrade"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}


volumes:
  postgres-db-volume:

networks:
  airflow_network:
    external: true

